#include <iostream>
using namespace std;

class Time {
private:
    short int hours;
    short int minutes;

    // Проверка корректности времени
    void validateTime() {
        if (minutes >= 60) {
            hours += minutes / 60;
            minutes %= 60;
        }
        if (minutes < 0) {
            hours -= 1 + (-minutes) / 60;
            minutes = 60 - (-minutes) % 60;
        }
        if (hours >= 24) {
            hours %= 24;
        }
        if (hours < 0) {
            hours = 24 - (-hours) % 24;
        }
    }

public:
    // Конструкторы
    Time() : hours(0), minutes(0) {} // По умолчанию
    Time(short int h, short int m) : hours(h), minutes(m) {
        validateTime();
    }
    Time(const Time& t) : hours(t.hours), minutes(t.minutes) {} // Копирования

    // Метод вычитания времени
    Time subtract(const Time& t) const {
        int totalMinutes1 = hours * 60 + minutes;
        int totalMinutes2 = t.hours * 60 + t.minutes;
        int resultMinutes = (totalMinutes1 - totalMinutes2 + 1440) % 1440; // Учёт перехода на предыдущие сутки

        return Time(resultMinutes / 60, resultMinutes % 60);
    }

    // Перегрузка операторов ввода/вывода
    friend ostream& operator<<(ostream& out, const Time& t) {
        out << (t.hours < 10 ? "0" : "") << t.hours << ":"
            << (t.minutes < 10 ? "0" : "") << t.minutes;
        return out;
    }
    friend istream& operator>>(istream& in, Time& t) {
        cout << "Введите часы (0-23): ";
        in >> t.hours;
        cout << "Введите минуты (0-59): ";
        in >> t.minutes;
        t.validateTime();
        return in;
    }

    // Унарные операции
    Time& operator++() { // Префиксный ++
        minutes++;
        validateTime();
        return *this;
    }

    Time operator++(int) { // Постфиксный ++
        Time temp = *this;
        ++(*this);
        return temp;
    }

    Time& operator--() { // Префиксный --
        minutes--;
        validateTime();
        return *this;
    }

    Time operator--(int) { // Постфиксный --
        Time temp = *this;
        --(*this);
        return temp;
    }

    // Преобразования типов
    operator int() const { // Неявное преобразование в int
        return hours * 60 + minutes;
    }

    explicit operator bool() const { // Явное преобразование в bool
        return hours != 0 || minutes != 0;
    }

    // Бинарные операции
    bool operator<(const Time& t) const {
        return int(*this) < int(t);
    }

    bool operator>(const Time& t) const {
        return int(*this) > int(t);
    }
};

int main() {
    Time t1, t2;
    cout << "Введите первое время:" << endl;
    cin >> t1;

    cout << "Введите второе время:" << endl;
    cin >> t2;

    cout << "Первое время: " << t1 << endl;
    cout << "Второе время: " << t2 << endl;

    Time result = t1.subtract(t2);
    cout << "Разница времени: " << result << endl;

    // Проверка унарных операций
    cout << "Инкремент первого времени: " << ++t1 << endl;
    cout << "Декремент второго времени: " << --t2 << endl;

    // Проверка преобразования типов
    cout << "Первое время в минутах: " << int(t1) << endl;
    cout << "Второе время в минутах: " << int(t2) << endl;
    cout << "Явное преобразование первого времени в bool: " << (bool(t1) ? "true" : "false") << endl;

    // Сравнение
    cout << "Первое время меньше второго? " << (t1 < t2 ? "Да" : "Нет") << endl;
    cout << "Первое время больше второго? " << (t1 > t2 ? "Да" : "Нет") << endl;

    return 0;
}
